namespace com.ibm.streamsx.messagehub.sample;

use com.ibm.streamsx.messagehub::MessageHubConsumer;
use com.ibm.streamsx.messagehub::MessageHubProducer;
use com.ibm.streamsx.messagehub::MessageType;

/*
 * This sample demonstrates how to use a submission time value as the start
 * position for the MessagehubConsumer.
 *
 * The producer operator will generate 50 tuples/sec after an initial delay of 10 seconds.
 */
public composite ConsumerVariableStartPositionSample {

param
    expression <rstring> $startPosition: getSubmissionTimeValue("start.position", "Default");
    // when we want to use also a timestamp as the start position ("start.position" = "Time"),
    // we must also be able to specify a start timestamp via submission time parameter
    expression <int64> $startTimeMillis: (int64)getSubmissionTimeValue("start.timestamp.millis", "0");

    expression <int32> $parallelWidth: (int32)getSubmissionTimeValue("num.kafka.consumers", "1");
    expression <rstring> $topic: "test";

    graph
        // all start positions apart from "Default" require a JobControlPlane operator for the KafkaConsumer
        () as JCP = JobControlPlane() {}

        @parallel(width = $parallelWidth)
        stream<MessageType.StringMessage, MessageType.ConsumerMessageMetadata> KafkaMessages = MessageHubConsumer() {
            param
                topic: $topic;
                groupId: "ConsumerVariableStartPositionSample_" + (rstring)jobID();
                /*
                 * By default, the operator will look for an file called "eventstreams.json" in the etc/ directory.
                 * Uncomment out this parameter to specify a different file.
                 */
                // credentialsFile : "etc/my-creds.json";
                startPositionStr: $startPosition;
                startTime: $startTimeMillis;
        }

        () as PrintOut = Custom (KafkaMessages) {
            logic
                onTuple KafkaMessages: {
                    println (KafkaMessages);
                }
        }


        stream<MessageType.StringMessage> Messages = Beacon() {
            param
                period: 0.02;
                initDelay: 10.0;
            output
                Messages: key = "key_" + (rstring) IterationCount(),
                          message = "msg_" + (rstring) IterationCount();
        }

        () as Producer = MessageHubProducer (Messages) {
            param
                topic: $topic;
                /*
                 * By default, the operator will look for an file called "eventstreams.json" in the etc/ directory.
                 * Uncomment out this parameter to specify a different file.
                 */
                // credentialsFile : "etc/my-creds.json";
        }
}
